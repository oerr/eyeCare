<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharpXamlForHtml5.System.dll</name>
    </assembly>
    <members>
        <member name="M:System.INTERNAL_WebRequestHelper_JSOnly.#ctor">
            <summary>
            Initializes a new instance of the INTERNAL_WebRequestHelper class.
            </summary>
        </member>
        <member name="M:System.INTERNAL_WebRequestHelper_JSOnly.MakeRequest(System.Uri,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Net.INTERNAL_WebRequestHelper_JSOnly_RequestCompletedEventHandler,System.Boolean)">
            <summary>
            Makes a synchronous or asynchronous request at the specified uri, using the specified method, with the specified headers and body, and calls the callbackMethod.
            </summary>
            <param name="address">the uri that identifies the Internet resource.</param>
            <param name="Method">The method to be called after making the request.</param>
            <param name="headers">
            A dictionary containing the headers to put in the method.
            The pairs key/values in the dictionary correspond to the pairs key/value in the headers.
            </param>
            <param name="body">The body of the request.</param>
            <param name="callbackMethod">The method to be called after the request has been made.</param>
            <param name="isAsync">A boolean that determines whether the request must be made synchronously or asynchronously.</param>
            <returns>The result of the request as a string.</returns>
        </member>
        <member name="E:System.INTERNAL_WebRequestHelper_JSOnly.DownloadStringCompleted">
            <summary>
            Occurs when the string download is completed.
            </summary>
        </member>
        <member name="T:System.CodeDom.Compiler.GeneratedCodeAttribute">
            <summary>
            Identifies code generated by a tool. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.CodeDom.Compiler.GeneratedCodeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the System.CodeDom.Compiler.GeneratedCodeAttribute
            class specifying the name and version of the tool that generated the code.
            </summary>
            <param name="tool">The name of the tool that generated the code.</param>
            <param name="version">The version of the tool that generated the code.</param>
        </member>
        <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Tool">
            <summary>
            Gets the name of the tool that generated the code.
            </summary>
        </member>
        <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Version">
            <summary>
            Gets the version of the tool that generated the code.
            </summary>
        </member>
        <member name="T:System.Net.DownloadStringCompletedEventArgs">
            <summary>
            Provides data for the System.Net.WebClient.DownloadStringCompleted event.
            </summary>
        </member>
        <member name="P:System.Net.DownloadStringCompletedEventArgs.Result">
            <summary>
            Gets the data that is downloaded by a Overload:System.Net.WebClient.DownloadStringAsync
            method.
            </summary>
        </member>
        <member name="P:System.Net.DownloadStringCompletedEventArgs.UserState">
            <summary>
            Gets the unique identifier for the asynchronous task.
            </summary>
        </member>
        <member name="P:System.Net.DownloadStringCompletedEventArgs.Cancelled">
            <summary>
            Gets a value indicating whether an asynchronous operation has been canceled.
            </summary>
        </member>
        <member name="P:System.Net.DownloadStringCompletedEventArgs.Error">
            <summary>
            Gets a value indicating which error occurred during an asynchronous operation.
            </summary>
        </member>
        <member name="T:System.Net.INTERNAL_WebRequestHelper_JSOnly_RequestCompletedEventArgs">
            <summary>
            Provides data for the System.Net.WebClient.DownloadStringCompleted event.
            </summary>
        </member>
        <member name="P:System.Net.INTERNAL_WebRequestHelper_JSOnly_RequestCompletedEventArgs.Result">
            <summary>
            Gets the data that is downloaded by a Overload:System.Net.WebClient.DownloadStringAsync
            method.
            </summary>
        </member>
        <member name="P:System.Net.INTERNAL_WebRequestHelper_JSOnly_RequestCompletedEventArgs.UserState">
            <summary>
            Gets the unique identifier for the asynchronous task.
            </summary>
        </member>
        <member name="P:System.Net.INTERNAL_WebRequestHelper_JSOnly_RequestCompletedEventArgs.Cancelled">
            <summary>
            Gets a value indicating whether an asynchronous operation has been canceled.
            </summary>
        </member>
        <member name="P:System.Net.INTERNAL_WebRequestHelper_JSOnly_RequestCompletedEventArgs.Error">
            <summary>
            Gets a value indicating which error occurred during an asynchronous operation.
            </summary>
        </member>
        <member name="T:System.Net.DownloadStringCompletedEventHandler">
            <summary>
            Represents the method that will handle the System.Net.WebClient.DownloadStringCompleted
            event of a System.Net.WebClient.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A System.Net.DownloadStringCompletedEventArgs that contains event data.</param>
            <returns></returns>
        </member>
        <member name="T:System.Net.INTERNAL_WebRequestHelper_JSOnly_RequestCompletedEventHandler">
            <summary>
            Represents the method that will handle the System.Net.WebClient.DownloadStringCompleted
            event of a System.Net.WebClient.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A System.Net.DownloadStringCompletedEventArgs that contains event data.</param>
            <returns></returns>
        </member>
        <member name="T:System.Net.WebExceptionStatus">
            <summary>
            Defines status codes for the System.Net.WebException class.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.GroupCollection">
            <summary>
            Returns the set of captured groups in a single match.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
            <summary>
            Provides an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that contains all System.Text.RegularExpressions.Group objects
            in the System.Text.RegularExpressions.GroupCollection.
            </returns>
        </member>
        <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
            <summary>
            Returns the number of groups in the collection.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
            <summary>
            Enables access to a member of the collection by integer index.
            </summary>
            <param name="groupnum">The zero-based index of the collection member to be retrieved.</param>
            <returns>The member of the collection specified by groupnum.</returns>
        </member>
        <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
            <summary>
            Enables access to a member of the collection by string index.
            </summary>
            <param name="groupname">The name of a capturing group.</param>
            <returns>The member of the collection specified by groupname.</returns>
        </member>
        <member name="T:System.Windows.Input.ICommand">
            <summary>
            Defines a command.
            </summary>
        </member>
        <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its
            current state.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed,
            this object can be set to null.
            </param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">
            Data used by the command. If the command does not require data to be passed,
            this object can be set to null.
            </param>
        </member>
        <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:System.ComponentModel.BrowsableAttribute">
            <summary>
            Specifies whether a property or event should be displayed in
            a property browsing window.
            </summary>
        </member>
        <member name="F:System.ComponentModel.BrowsableAttribute.Yes">
            <summary>
            Specifies that a property or event can be modified at
            design time. This <see langword='static '/>
            field is read-only.
            </summary>
        </member>
        <member name="F:System.ComponentModel.BrowsableAttribute.No">
            <summary>
            Specifies that a property or event cannot be modified at
            design time. This <see langword='static '/>field is read-only.
            </summary>
        </member>
        <member name="F:System.ComponentModel.BrowsableAttribute.Default">
            <summary>
            Specifies the default value for the <see cref="T:System.ComponentModel.BrowsableAttribute"/>,
            which is <see cref="F:System.ComponentModel.BrowsableAttribute.Yes"/>. This <see langword="static "/>field is read-only.
            </summary>
        </member>
        <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.BrowsableAttribute"/> class.
            </summary>
            <param name="browsable"></param>
        </member>
        <member name="T:System.ComponentModel.CategoryAttribute">
            <summary>
            Specifies the name of the category in which to group the property or event
            when displayed in a System.Windows.Forms.PropertyGrid control set to Categorized
            mode.
            </summary>
        </member>
        <member name="M:System.ComponentModel.CategoryAttribute.#ctor">
            <summary>
            Initializes a new instance of the System.ComponentModel.CategoryAttribute
            class using the category name Default.
            </summary>
        </member>
        <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.ComponentModel.CategoryAttribute
            class using the specified category name.
            </summary>
            <param name="category">The name of the category.</param>
        </member>
        <member name="M:System.ComponentModel.CategoryAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current System.ComponentModel.CategoryAttribute.
            </summary>
            <param name="obj">The object to test the value equality of.</param>
            <returns>
            true if the value of the given object is equal to that of the current; otherwise,
            false.
            </returns>
        </member>
        <member name="M:System.ComponentModel.CategoryAttribute.GetHashCode">
            <summary>
            Returns the hash code for this attribute.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ComponentModel.CategoryAttribute.IsDefaultAttribute">
            <summary>
            Determines if this attribute is the default.
            </summary>
            <returns>
            true if the attribute is the default value for this attribute class; otherwise,
            false.
            </returns>
        </member>
        <member name="P:System.ComponentModel.CategoryAttribute.Action">
            <summary>
            Gets a System.ComponentModel.CategoryAttribute representing the Action category.
            </summary>
        </member>
        <member name="P:System.ComponentModel.CategoryAttribute.Appearance">
            <summary>
            Gets a System.ComponentModel.CategoryAttribute representing the Appearance
            category.
            </summary>
        </member>
        <member name="P:System.ComponentModel.CategoryAttribute.Behavior">
            <summary>
            Gets a System.ComponentModel.CategoryAttribute representing the Behavior
            category.
            </summary>
        </member>
        <member name="P:System.ComponentModel.CategoryAttribute.Data">
            <summary>
            Gets a System.ComponentModel.CategoryAttribute representing the Data category.
            </summary>
        </member>
        <member name="P:System.ComponentModel.CategoryAttribute.Default">
            <summary>
            Gets a System.ComponentModel.CategoryAttribute representing the Default category.
            </summary>
        </member>
        <member name="P:System.ComponentModel.CategoryAttribute.Design">
            <summary>
            Gets a System.ComponentModel.CategoryAttribute representing the Design category.
            </summary>
        </member>
        <member name="P:System.ComponentModel.CategoryAttribute.DragDrop">
            <summary>
            Gets a System.ComponentModel.CategoryAttribute representing the DragDrop
            category.
            </summary>
        </member>
        <member name="P:System.ComponentModel.CategoryAttribute.Focus">
            <summary>
            Gets a System.ComponentModel.CategoryAttribute representing the Focus category.
            </summary>
        </member>
        <member name="P:System.ComponentModel.CategoryAttribute.Format">
            <summary>
            Gets a System.ComponentModel.CategoryAttribute representing the Format category.
            </summary>
        </member>
        <member name="P:System.ComponentModel.CategoryAttribute.Key">
            <summary>
            Gets a System.ComponentModel.CategoryAttribute representing the Key category.
            </summary>
        </member>
        <member name="P:System.ComponentModel.CategoryAttribute.Layout">
            <summary>
            Gets a System.ComponentModel.CategoryAttribute representing the Layout category.
            </summary>
        </member>
        <member name="P:System.ComponentModel.CategoryAttribute.Mouse">
            <summary>
            Gets a System.ComponentModel.CategoryAttribute representing the Mouse category.
            </summary>
        </member>
        <member name="P:System.ComponentModel.CategoryAttribute.WindowStyle">
            <summary>
            Gets a System.ComponentModel.CategoryAttribute representing the WindowStyle
            category.
            </summary>
        </member>
        <member name="P:System.ComponentModel.CategoryAttribute.Category">
            <summary>
            Gets the name of the category for the property or event that this attribute
            is applied to.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DefaultValueAttribute">
            <summary>
            Specifies the default value for a property.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the System.ComponentModel.DefaultValueAttribute
            class using a System.Boolean value.
            </summary>
            <param name="value">A System.Boolean that is the default value.</param>
        </member>
        <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the System.ComponentModel.DefaultValueAttribute
            class using an 8-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit unsigned integer that is the default value.</param>
        </member>
        <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the System.ComponentModel.DefaultValueAttribute
            class using a Unicode character.
            </summary>
            <param name="value">A Unicode character that is the default value.</param>
        </member>
        <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the System.ComponentModel.DefaultValueAttribute
            class using a double-precision floating point number.
            </summary>
            <param name="value">A double-precision floating point number that is the default value.</param>
        </member>
        <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the System.ComponentModel.DefaultValueAttribute
            class using a 16-bit signed integer.
            </summary>
            <param name="value">A 16-bit signed integer that is the default value.</param>
        </member>
        <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the System.ComponentModel.DefaultValueAttribute
            class using a 32-bit signed integer.
            </summary>
            <param name="value">A 32-bit signed integer that is the default value.</param>
        </member>
        <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the System.ComponentModel.DefaultValueAttribute
            class using a 64-bit signed integer.
            </summary>
            <param name="value">A 64-bit signed integer that is the default value.</param>
        </member>
        <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the System.ComponentModel.DefaultValueAttribute
            class.
            </summary>
            <param name="value">An System.Object that represents the default value.</param>
        </member>
        <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the System.ComponentModel.DefaultValueAttribute
            class using a single-precision floating point number.
            </summary>
            <param name="value">A single-precision floating point number that is the default value.</param>
        </member>
        <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.ComponentModel.DefaultValueAttribute
            class using a System.String.
            </summary>
            <param name="value">A System.String that is the default value.</param>
        </member>
        <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the System.ComponentModel.DefaultValueAttribute
            class, converting the specified value to the specified type, and using an
            invariant culture as the translation context.
            </summary>
            <param name="type">A System.Type that represents the type to convert the value to.</param>
            <param name="value">
            A System.String that can be converted to the type using the System.ComponentModel.TypeConverter
            for the type and the U.S. English culture.
            </param>
        </member>
        <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
            <summary>
            Gets the default value of the property this attribute is bound to.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DescriptionAttribute">
            <summary>
            Specifies a description for a property or event.
            </summary>
        </member>
        <member name="F:System.ComponentModel.DescriptionAttribute.Default">
            <summary>
            Specifies the default value for the System.ComponentModel.DescriptionAttribute,
            which is an empty string (""). This static field is read-only.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DescriptionAttribute.#ctor">
            <summary>
            Initializes a new instance of the System.ComponentModel.DescriptionAttribute
            class with no parameters.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.ComponentModel.DescriptionAttribute
            class with a description.
            </summary>
            <param name="name">The description text.</param>
        </member>
        <member name="M:System.ComponentModel.DescriptionAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current System.ComponentModel.DescriptionAttribute.
            </summary>
            <param name="obj">The object to test the value equality of.</param>
            <returns>
            true if the value of the given object is equal to that of the current; otherwise,
            false.
            </returns>
        </member>
        <member name="M:System.ComponentModel.DescriptionAttribute.GetHashCode">
            <summary>
            Returns the hash code for this attribute.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ComponentModel.DescriptionAttribute.IsDefaultAttribute">
            <summary>
            Returns a value indicating whether this is the default System.ComponentModel.DescriptionAttribute
            instance.
            </summary>
            <returns>A value indicating whether this is the default System.ComponentModel.DescriptionAttribute instance.</returns>
        </member>
        <member name="P:System.ComponentModel.DescriptionAttribute.Description">
            <summary>
            Gets the description stored in this attribute.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DescriptionAttribute.DescriptionValue">
            <summary>
            Gets or sets the string stored as the description.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DesignerCategoryAttribute">
            <summary>
            Specifies that the designer for a class belongs to a certain category.
            </summary>
        </member>
        <member name="F:System.ComponentModel.DesignerCategoryAttribute.Component">
            <summary>
            Specifies that a component marked with this category use a component designer.
            This field is read-only.
            </summary>
        </member>
        <member name="F:System.ComponentModel.DesignerCategoryAttribute.Form">
            <summary>
            Specifies that a component marked with this category use a form designer.
            This static field is read-only.
            </summary>
        </member>
        <member name="F:System.ComponentModel.DesignerCategoryAttribute.Generic">
            <summary>
            Specifies that a component marked with this category use a generic designer.
            This static field is read-only.
            </summary>
        </member>
        <member name="F:System.ComponentModel.DesignerCategoryAttribute.Default">
            <summary>
            Specifies that a component marked with this category cannot use a visual
            designer. This static field is read-only.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DesignerCategoryAttribute.#ctor">
            <summary>
            Initializes a new instance of the System.ComponentModel.DesignerCategoryAttribute
            class with an empty string ("").
            </summary>
        </member>
        <member name="M:System.ComponentModel.DesignerCategoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.ComponentModel.DesignerCategoryAttribute
            class with the given category name.
            </summary>
            <param name="category">The name of the category.</param>
        </member>
        <member name="M:System.ComponentModel.DesignerCategoryAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current System.ComponentModel.DesignOnlyAttribute.
            </summary>
            <param name="obj">The object to test the value equality of.</param>
            <returns>
            true if the value of the given object is equal to that of the current; otherwise,
            false.
            </returns>
        </member>
        <member name="M:System.ComponentModel.DesignerCategoryAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ComponentModel.DesignerCategoryAttribute.IsDefaultAttribute">
            <summary>
            Determines if this attribute is the default.
            </summary>
            <returns>
            true if the attribute is the default value for this attribute class; otherwise,
            false.
            </returns>
        </member>
        <member name="P:System.ComponentModel.DesignerCategoryAttribute.TypeId">
            <summary>
            Gets a unique identifier for this attribute.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DesignerCategoryAttribute.Category">
            <summary>
            Gets the name of the category.
            </summary>
        </member>
        <member name="T:System.ComponentModel.EditorBrowsableAttribute">
            <summary>
            Specifies that a property or method is viewable in an editor. This class
            cannot be inherited.
            </summary>
        </member>
        <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
            <summary>
            Initializes a new instance of the System.ComponentModel.EditorBrowsableAttribute
            class with System.ComponentModel.EditorBrowsableAttribute.State set to the
            default state.
            </summary>
        </member>
        <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
            <summary>
            Initializes a new instance of the System.ComponentModel.EditorBrowsableAttribute
            class with an System.ComponentModel.EditorBrowsableState.
            </summary>
            <param name="state">
            The System.ComponentModel.EditorBrowsableState to set System.ComponentModel.EditorBrowsableAttribute.State
            to.
            </param>
        </member>
        <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
            <summary>
            Gets the browsable state of the property or method.
            </summary>
        </member>
        <member name="T:System.ComponentModel.EditorBrowsableState">
            <summary>
            Specifies the browsable state of a property or method from within an editor.
            </summary>
        </member>
        <member name="F:System.ComponentModel.EditorBrowsableState.Always">
            <summary>
            The property or method is always browsable from within an editor.
            </summary>
        </member>
        <member name="F:System.ComponentModel.EditorBrowsableState.Never">
            <summary>
            The property or method is never browsable from within an editor.
            </summary>
        </member>
        <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
            <summary>
            The property or method is a feature that only advanced users should see.
            An editor can either show or hide such properties.
            </summary>
        </member>
        <member name="T:System.Net.HttpRequestHeader">
            <summary>
            The HTTP headers that may be specified in a client request.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.CacheControl">
            <summary>
            The Cache-Control header, which specifies directives that must be obeyed
            by all cache control mechanisms along the request/response chain.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Connection">
            <summary>
            The Connection header, which specifies options that are desired for a particular
            connection.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Date">
            <summary>
            The Date header, which specifies the date and time at which the request originated.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.KeepAlive">
            <summary>
            The Keep-Alive header, which specifies a parameter used into order to maintain
            a persistent connection.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Pragma">
            <summary>
            The Pragma header, which specifies implementation-specific directives that
            might apply to any agent along the request/response chain.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Trailer">
            <summary>
            The Trailer header, which specifies the header fields present in the trailer
            of a message encoded with chunked transfer-coding.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.TransferEncoding">
            <summary>
            The Transfer-Encoding header, which specifies what (if any) type of transformation
            that has been applied to the message body.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Upgrade">
            <summary>
            The Upgrade header, which specifies additional communications protocols that
            the client supports.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Via">
            <summary>
            The Via header, which specifies intermediate protocols to be used by gateway
            and proxy agents.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Warning">
            <summary>
            The Warning header, which specifies additional information about that status
            or transformation of a message that might not be reflected in the message.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Allow">
            <summary>
            The Allow header, which specifies the set of HTTP methods supported.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.ContentLength">
            <summary>
            The Content-Length header, which specifies the length, in bytes, of the accompanying
            body data.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.ContentType">
            <summary>
            The Content-Type header, which specifies the MIME type of the accompanying
            body data.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.ContentEncoding">
            <summary>
            The Content-Encoding header, which specifies the encodings that have been
            applied to the accompanying body data.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.ContentLanguage">
            <summary>
            The Content-Langauge header, which specifies the natural language(s) of the
            accompanying body data.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.ContentLocation">
            <summary>
            The Content-Location header, which specifies a URI from which the accompanying
            body may be obtained.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.ContentMd5">
            <summary>
            The Content-MD5 header, which specifies the MD5 digest of the accompanying
            body data, for the purpose of providing an end-to-end message integrity check.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.ContentRange">
            <summary>
            The Content-Range header, which specifies where in the full body the accompanying
            partial body data should be applied.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Expires">
            <summary>
            The Expires header, which specifies the date and time after which the accompanying
            body data should be considered stale.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.LastModified">
            <summary>
            The Last-Modified header, which specifies the date and time at which the
            accompanying body data was last modified.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Accept">
            <summary>
            The Accept header, which specifies the MIME types that are acceptable for
            the response.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.AcceptCharset">
            <summary>
            The Accept-Charset header, which specifies the character sets that are acceptable
            for the response.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.AcceptEncoding">
            <summary>
            The Accept-Encoding header, which specifies the content encodings that are
            acceptable for the response.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.AcceptLanguage">
            <summary>
            The Accept-Langauge header, which specifies that natural languages that are
            preferred for the response.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Authorization">
            <summary>
            The Authorization header, which specifies the credentials that the client
            presents in order to authenticate itself to the server.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Cookie">
            <summary>
            The Cookie header, which specifies cookie data presented to the server.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Expect">
            <summary>
            The Expect header, which specifies particular server behaviors that are required
            by the client.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.From">
            <summary>
            The From header, which specifies an Internet E-mail address for the human
            user who controls the requesting user agent.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Host">
            <summary>
            The Host header, which specifies the host name and port number of the resource
            being requested.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.IfMatch">
            <summary>
            The If-Match header, which specifies that the requested operation should
            be performed only if the client's cached copy of the indicated resource is
            current.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.IfModifiedSince">
            <summary>
            The If-Modified-Since header, which specifies that the requested operation
            should be performed only if the requested resource has been modified since
            the indicated data and time.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.IfNoneMatch">
            <summary>
            The If-None-Match header, which specifies that the requested operation should
            be performed only if none of client's cached copies of the indicated resources
            are current.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.IfRange">
            <summary>
            The If-Range header, which specifies that only the specified range of the
            requested resource should be sent, if the client's cached copy is current.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.IfUnmodifiedSince">
            <summary>
            The If-Unmodified-Since header, which specifies that the requested operation
            should be performed only if the requested resource has not been modified
            since the indicated date and time.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.MaxForwards">
            <summary>
            The Max-Forwards header, which specifies an integer indicating the remaining
            number of times that this request may be forwarded.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.ProxyAuthorization">
            <summary>
            The Proxy-Authorization header, which specifies the credentials that the
            client presents in order to authenticate itself to a proxy.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Referer">
            <summary>
            The Referer header, which specifies the URI of the resource from which the
            request URI was obtained.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Range">
            <summary>
            The Range header, which specifies the the sub-range(s) of the response that
            the client requests be returned in lieu of the entire response.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Te">
            <summary>
            The TE header, which specifies the transfer encodings that are acceptable
            for the response.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.Translate">
            <summary>
            The Translate header, a Microsoft extension to the HTTP specification used
            in conjunction with WebDAV functionality.
            </summary>
        </member>
        <member name="F:System.Net.HttpRequestHeader.UserAgent">
            <summary>
            The User-Agent header, which specifies information about the client agent.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.CacheControl">
            <summary>
            The Cache-Control header, which specifies caching directives that must be
            obeyed by all caching mechanisms along the request/response chain.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.Connection">
            <summary>
            The Connection header, which specifies options that are desired for a particular
            connection.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.Date">
            <summary>
            The Date header, which specifies the date and time at which the response
            originated.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.KeepAlive">
            <summary>
            The Keep-Alive header, which specifies a parameter to be used to maintain
            a persistent connection.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.Pragma">
            <summary>
            The Pragma header, which specifies implementation-specific directives that
            might apply to any agent along the request/response chain.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.Trailer">
            <summary>
            The Trailer header, which specifies that the indicated header fields are
            present in the trailer of a message that is encoded with chunked transfer-coding.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.TransferEncoding">
            <summary>
            The Transfer-Encoding header, which specifies what (if any) type of transformation
            has been applied to the message body.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.Upgrade">
            <summary>
            The Upgrade header, which specifies additional communications protocols that
            the client supports.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.Via">
            <summary>
            The Via header, which specifies intermediate protocols to be used by gateway
            and proxy agents.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.Warning">
            <summary>
            The Warning header, which specifies additional information about that status
            or transformation of a message that might not be reflected in the message.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.Allow">
            <summary>
            The Allow header, which specifies the set of HTTP methods that are supported.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.ContentLength">
            <summary>
            The Content-Length header, which specifies the length, in bytes, of the accompanying
            body data.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.ContentType">
            <summary>
            The Content-Type header, which specifies the MIME type of the accompanying
            body data.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.ContentEncoding">
            <summary>
            The Content-Encoding header, which specifies the encodings that have been
            applied to the accompanying body data.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.ContentLanguage">
            <summary>
            The Content-Langauge header, which specifies the natural language or languages
            of the accompanying body data.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.ContentLocation">
            <summary>
            The Content-Location header, which specifies a URI from which the accompanying
            body can be obtained.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.ContentMd5">
            <summary>
            The Content-MD5 header, which specifies the MD5 digest of the accompanying
            body data, for the purpose of providing an end-to-end message integrity check.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.ContentRange">
            <summary>
            The Range header, which specifies the subrange or subranges of the response
            that the client requests be returned in lieu of the entire response.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.Expires">
            <summary>
            The Expires header, which specifies the date and time after which the accompanying
            body data should be considered stale.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.LastModified">
            <summary>
            The Last-Modified header, which specifies the date and time at which the
            accompanying body data was last modified.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.AcceptRanges">
            <summary>
            The Accept-Ranges header, which specifies the range that is accepted by the
            server.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.Age">
            <summary>
            The Age header, which specifies the time, in seconds, since the response
            was generated by the originating server.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.ETag">
            <summary>
            The Etag header, which specifies the current value for the requested variant.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.Location">
            <summary>
            The Location header, which specifies a URI to which the client is redirected
            to obtain the requested resource.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.ProxyAuthenticate">
            <summary>
            The Proxy-Authenticate header, which specifies that the client must authenticate
            itself to a proxy.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.RetryAfter">
            <summary>
            The Retry-After header, which specifies a time (in seconds), or a date and
            time, after which the client can retry its request.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.Server">
            <summary>
            The Server header, which specifies information about the originating server
            agent.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.SetCookie">
            <summary>
            The Set-Cookie header, which specifies cookie data that is presented to the
            client.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.Vary">
            <summary>
            The Vary header, which specifies the request headers that are used to determine
            whether a cached response is fresh.
            </summary>
        </member>
        <member name="F:System.Net.HttpResponseHeader.WwwAuthenticate">
            <summary>
            The WWW-Authenticate header, which specifies that the client must authenticate
            itself to the server.
            </summary>
        </member>
        <member name="T:System.Net.HttpStatusCode">
            <summary>
            Contains the values of status codes defined for HTTP.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Continue">
            <summary>
            Equivalent to HTTP status 100. System.Net.HttpStatusCode.Continue indicates
            that the client can continue with its request.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.SwitchingProtocols">
            <summary>
            Equivalent to HTTP status 101. System.Net.HttpStatusCode.SwitchingProtocols
            indicates that the protocol version or protocol is being changed.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.OK">
            <summary>
            Equivalent to HTTP status 200. System.Net.HttpStatusCode.OK indicates that
            the request succeeded and that the requested information is in the response.
            This is the most common status code to receive.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Created">
            <summary>
            Equivalent to HTTP status 201. System.Net.HttpStatusCode.Created indicates
            that the request resulted in a new resource created before the response was
            sent.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Accepted">
            <summary>
            Equivalent to HTTP status 202. System.Net.HttpStatusCode.Accepted indicates
            that the request has been accepted for further processing.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.NonAuthoritativeInformation">
            <summary>
            Equivalent to HTTP status 203. System.Net.HttpStatusCode.NonAuthoritativeInformation
            indicates that the returned metainformation is from a cached copy instead
            of the origin server and therefore may be incorrect.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.NoContent">
            <summary>
            Equivalent to HTTP status 204. System.Net.HttpStatusCode.NoContent indicates
            that the request has been successfully processed and that the response is
            intentionally blank.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.ResetContent">
            <summary>
            Equivalent to HTTP status 205. System.Net.HttpStatusCode.ResetContent indicates
            that the client should reset (not reload) the current resource.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.PartialContent">
            <summary>
            Equivalent to HTTP status 206. System.Net.HttpStatusCode.PartialContent indicates
            that the response is a partial response as requested by a GET request that
            includes a byte range.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.MultipleChoices">
            <summary>
            Equivalent to HTTP status 300. System.Net.HttpStatusCode.MultipleChoices
            indicates that the requested information has multiple representations. The
            default action is to treat this status as a redirect and follow the contents
            of the Location header associated with this response.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Ambiguous">
            <summary>
            Equivalent to HTTP status 300. System.Net.HttpStatusCode.Ambiguous indicates
            that the requested information has multiple representations. The default
            action is to treat this status as a redirect and follow the contents of the
            Location header associated with this response.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.MovedPermanently">
            <summary>
            Equivalent to HTTP status 301. System.Net.HttpStatusCode.MovedPermanently
            indicates that the requested information has been moved to the URI specified
            in the Location header. The default action when this status is received is
            to follow the Location header associated with the response.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Moved">
            <summary>
            Equivalent to HTTP status 301. System.Net.HttpStatusCode.Moved indicates
            that the requested information has been moved to the URI specified in the
            Location header. The default action when this status is received is to follow
            the Location header associated with the response. When the original request
            method was POST, the redirected request will use the GET method.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Found">
            <summary>
            Equivalent to HTTP status 302. System.Net.HttpStatusCode.Found indicates
            that the requested information is located at the URI specified in the Location
            header. The default action when this status is received is to follow the
            Location header associated with the response. When the original request method
            was POST, the redirected request will use the GET method.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Redirect">
            <summary>
            Equivalent to HTTP status 302. System.Net.HttpStatusCode.Redirect indicates
            that the requested information is located at the URI specified in the Location
            header. The default action when this status is received is to follow the
            Location header associated with the response. When the original request method
            was POST, the redirected request will use the GET method.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.SeeOther">
            <summary>
            Equivalent to HTTP status 303. System.Net.HttpStatusCode.SeeOther automatically
            redirects the client to the URI specified in the Location header as the result
            of a POST. The request to the resource specified by the Location header will
            be made with a GET.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.RedirectMethod">
            <summary>
            Equivalent to HTTP status 303. System.Net.HttpStatusCode.RedirectMethod automatically
            redirects the client to the URI specified in the Location header as the result
            of a POST. The request to the resource specified by the Location header will
            be made with a GET.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.NotModified">
            <summary>
            Equivalent to HTTP status 304. System.Net.HttpStatusCode.NotModified indicates
            that the client's cached copy is up to date. The contents of the resource
            are not transferred.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.UseProxy">
            <summary>
            Equivalent to HTTP status 305. System.Net.HttpStatusCode.UseProxy indicates
            that the request should use the proxy server at the URI specified in the
            Location header.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Unused">
            <summary>
            Equivalent to HTTP status 306. System.Net.HttpStatusCode.Unused is a proposed
            extension to the HTTP/1.1 specification that is not fully specified.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.RedirectKeepVerb">
            <summary>
            Equivalent to HTTP status 307. System.Net.HttpStatusCode.RedirectKeepVerb
            indicates that the request information is located at the URI specified in
            the Location header. The default action when this status is received is to
            follow the Location header associated with the response. When the original
            request method was POST, the redirected request will also use the POST method.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.TemporaryRedirect">
            <summary>
            Equivalent to HTTP status 307. System.Net.HttpStatusCode.TemporaryRedirect
            indicates that the request information is located at the URI specified in
            the Location header. The default action when this status is received is to
            follow the Location header associated with the response. When the original
            request method was POST, the redirected request will also use the POST method.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.BadRequest">
            <summary>
            Equivalent to HTTP status 400. System.Net.HttpStatusCode.BadRequest indicates
            that the request could not be understood by the server. System.Net.HttpStatusCode.BadRequest
            is sent when no other error is applicable, or if the exact error is unknown
            or does not have its own error code.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Unauthorized">
            <summary>
            Equivalent to HTTP status 401. System.Net.HttpStatusCode.Unauthorized indicates
            that the requested resource requires authentication. The WWW-Authenticate
            header contains the details of how to perform the authentication.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.PaymentRequired">
            <summary>
            Equivalent to HTTP status 402. System.Net.HttpStatusCode.PaymentRequired
            is reserved for future use.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Forbidden">
            <summary>
            Equivalent to HTTP status 403. System.Net.HttpStatusCode.Forbidden indicates
            that the server refuses to fulfill the request.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.NotFound">
            <summary>
            Equivalent to HTTP status 404. System.Net.HttpStatusCode.NotFound indicates
            that the requested resource does not exist on the server.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.MethodNotAllowed">
            <summary>
            Equivalent to HTTP status 405. System.Net.HttpStatusCode.MethodNotAllowed
            indicates that the request method (POST or GET) is not allowed on the requested
            resource.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.NotAcceptable">
            <summary>
            Equivalent to HTTP status 406. System.Net.HttpStatusCode.NotAcceptable indicates
            that the client has indicated with Accept headers that it will not accept
            any of the available representations of the resource.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.ProxyAuthenticationRequired">
            <summary>
            Equivalent to HTTP status 407. System.Net.HttpStatusCode.ProxyAuthenticationRequired
            indicates that the requested proxy requires authentication. The Proxy-authenticate
            header contains the details of how to perform the authentication.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.RequestTimeout">
            <summary>
            Equivalent to HTTP status 408. System.Net.HttpStatusCode.RequestTimeout indicates
            that the client did not send a request within the time the server was expecting
            the request.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Conflict">
            <summary>
            Equivalent to HTTP status 409. System.Net.HttpStatusCode.Conflict indicates
            that the request could not be carried out because of a conflict on the server.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Gone">
            <summary>
            Equivalent to HTTP status 410. System.Net.HttpStatusCode.Gone indicates that
            the requested resource is no longer available.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.LengthRequired">
            <summary>
            Equivalent to HTTP status 411. System.Net.HttpStatusCode.LengthRequired indicates
            that the required Content-length header is missing.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.PreconditionFailed">
            <summary>
            Equivalent to HTTP status 412. System.Net.HttpStatusCode.PreconditionFailed
            indicates that a condition set for this request failed, and the request cannot
            be carried out. Conditions are set with conditional request headers like
            If-Match, If-None-Match, or If-Unmodified-Since.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.RequestEntityTooLarge">
            <summary>
            Equivalent to HTTP status 413. System.Net.HttpStatusCode.RequestEntityTooLarge
            indicates that the request is too large for the server to process.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.RequestUriTooLong">
            <summary>
            Equivalent to HTTP status 414. System.Net.HttpStatusCode.RequestUriTooLong
            indicates that the URI is too long.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.UnsupportedMediaType">
            <summary>
            Equivalent to HTTP status 415. System.Net.HttpStatusCode.UnsupportedMediaType
            indicates that the request is an unsupported type.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.RequestedRangeNotSatisfiable">
            <summary>
            Equivalent to HTTP status 416. System.Net.HttpStatusCode.RequestedRangeNotSatisfiable
            indicates that the range of data requested from the resource cannot be returned,
            either because the beginning of the range is before the beginning of the
            resource, or the end of the range is after the end of the resource.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.ExpectationFailed">
            <summary>
            Equivalent to HTTP status 417. System.Net.HttpStatusCode.ExpectationFailed
            indicates that an expectation given in an Expect header could not be met
            by the server.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.UpgradeRequired">
            <summary>
            Equivalent to HTTP status 426. System.Net.HttpStatusCode.UpgradeRequired
            indicates that the client should switch to a different protocol such as TLS/1.0.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.InternalServerError">
            <summary>
            Equivalent to HTTP status 500. System.Net.HttpStatusCode.InternalServerError
            indicates that a generic error has occurred on the server.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.NotImplemented">
            <summary>
            Equivalent to HTTP status 501. System.Net.HttpStatusCode.NotImplemented indicates
            that the server does not support the requested function.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.BadGateway">
            <summary>
            Equivalent to HTTP status 502. System.Net.HttpStatusCode.BadGateway indicates
            that an intermediate proxy server received a bad response from another proxy
            or the origin server.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.ServiceUnavailable">
            <summary>
            Equivalent to HTTP status 503. System.Net.HttpStatusCode.ServiceUnavailable
            indicates that the server is temporarily unavailable, usually due to high
            load or maintenance.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.GatewayTimeout">
            <summary>
            Equivalent to HTTP status 504. System.Net.HttpStatusCode.GatewayTimeout indicates
            that an intermediate proxy server timed out while waiting for a response
            from another proxy or the origin server.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.HttpVersionNotSupported">
            <summary>
            Equivalent to HTTP status 505. System.Net.HttpStatusCode.HttpVersionNotSupported
            indicates that the requested HTTP version is not supported by the server.
            </summary>
        </member>
        <member name="T:System.Net.HttpWebResponse">
            <summary>
            Provides an HTTP-specific implementation of the System.Net.WebResponse class.
            </summary>
        </member>
        <member name="T:System.Net.WebResponse">
            <summary>
            Provides a response from a Uniform Resource Identifier (URI). This is an
            abstract class.
            </summary>
        </member>
        <member name="M:System.Net.HttpWebResponse.GetResponseStream">
            <summary>
            Gets the stream that is used to read the body of the response from the server.
            </summary>
            <returns>A System.IO.Stream containing the body of the response.</returns>
        </member>
        <member name="P:System.Net.HttpWebResponse.StatusCode">
            <summary>
            Gets the status of the response.
            </summary>
        </member>
        <member name="T:System.Net.Security.ProtectionLevel">
            <summary>
            Indicates the security services requested for an authenticated stream.
            </summary>
        </member>
        <member name="F:System.Net.Security.ProtectionLevel.None">
            <summary>
            Authentication only.
            </summary>
        </member>
        <member name="F:System.Net.Security.ProtectionLevel.Sign">
            <summary>
            Sign data to help ensure the integrity of transmitted data.
            </summary>
        </member>
        <member name="F:System.Net.Security.ProtectionLevel.EncryptAndSign">
            <summary>
            Encrypt and sign data to help ensure the confidentiality and integrity of
            transmitted data.
            </summary>
        </member>
        <member name="T:System.Net.UploadStringCompletedEventArgs">
            <summary>
            Provides data for the System.Net.WebClient.UploadStringCompleted event.
            </summary>
        </member>
        <member name="M:System.Net.UploadStringCompletedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the System.ComponentModel.AsyncCompletedEventArgs
            class.
            </summary>
        </member>
        <member name="M:System.Net.UploadStringCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the System.ComponentModel.AsyncCompletedEventArgs
            class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="userState">
            The optional user-supplied state object passed to the System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)
            method.
            </param>
        </member>
        <member name="P:System.Net.UploadStringCompletedEventArgs.Cancelled">
            <summary>
            Gets a value indicating whether an asynchronous operation has been canceled.
            </summary>
        </member>
        <member name="P:System.Net.UploadStringCompletedEventArgs.Error">
            <summary>
            Gets a value indicating which error occurred during an asynchronous operation.
            </summary>
        </member>
        <member name="P:System.Net.UploadStringCompletedEventArgs.UserState">
            <summary>
            Gets the unique identifier for the asynchronous task.
            </summary>
        </member>
        <member name="P:System.Net.UploadStringCompletedEventArgs.Result">
            <summary>
            Gets the server reply to a string upload operation that is started by calling
            an Overload:System.Net.WebClient.UploadStringAsync method.
            </summary>
        </member>
        <member name="T:System.Net.UploadStringCompletedEventHandler">
            <summary>
            Represents the method that will handle the System.Net.WebClient.UploadStringCompleted
            event of a System.Net.WebClient.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A System.Net.UploadStringCompletedEventArgs containing event data.</param>
        </member>
        <member name="T:System.Net.WebClient">
            <summary>
            Provides common methods for sending data to and receiving data from a resource
            identified by a URI.
            </summary>
            <example>
            Here is an example of a use of the WebClient to receive data:
            <code lang="C#">
            //We create the WebClient with the right encoding and headers:
            var webClient = new WebClient();
            webClient.Encoding = Encoding.UTF8;
            webClient.Headers[HttpRequestHeader.Accept] = "application/xml";
            
            //We submit the request to the server and wait for its response:
            string response = await webClient.DownloadStringTaskAsync("http://someAddress.com");
            
            //We modify the response so that it can be deserialized (deserialization is not perfect yet):
            response = response.Replace(@"xmlns=""http://NameSpaceOfTheDeserialization""", "");
            response = "&lt;ToDoItemsWrapper&gt;" + response.Replace("ArrayOfToDoItem", "ToDoItems") + "&lt;/ToDoItemsWrapper&gt;"; // Workaround for the fact that "ArrayOf" types cannot be directly deserialized by the XmlSerializer in this Beta version.
            
            //We create the Deserializer:
            var deserializer = new XmlSerializer(typeof(ToDoItemsWrapper));
            var memoryStream = new MemoryStream(Encoding.UTF8.GetBytes(response));
            var xmlReader = XmlReader.Create(memoryStream);
            
            //We deserialize:
            ToDoItemsWrapper items = (ToDoItemsWrapper)deserializer.Deserialize(xmlReader);
            </code>
            Here is what the ToDoItemsWrapper class looks like (with ToDoItem a Serializable class) :
            <code lang="C#">
            // Workaround for the fact that "ArrayOf" types cannot directly be deserialized by the XmlSerializer in this Beta version:
            [DataContract]
            public class ToDoItemsWrapper
            {
                public List&lt;ToDoItem&gt; ToDoItems { get; set; }
            }
            </code>
            Here is another example that shows how you can use the WebClient to send data:
            <code lang="C#">
            //We parse the data in a string:
            string data = string.Format(@"{{""Id"": ""{0}"",""Description"": ""{1}""}}"Guid.NewGuid(), MyTextBox.Text.Replace("\"", "'"));
            //We create the WebClient:
            var webClient = new WebClient();
            We set the encoding and Headers (note: our data is formatted in json so we set the HttpRequestHeader.ContentType header accordingly) 
            webClient.Headers[HttpRequestHeader.ContentType] = "application/json";
            webClient.Encoding = Encoding.UTF8;
            string response = await webClient.UploadStringTaskAsync("http://cshtml5-rest-sample.azurewebsites.net/api/Todo/", "POST", data);
            </code>
            </example>
        </member>
        <member name="M:System.Net.WebClient.#ctor">
            <summary>
            Initializes a new instance of the System.Net.WebClient class.
            </summary>
        </member>
        <member name="M:System.Net.WebClient.DownloadString(System.String)">
            <summary>
            Downloads the requested resource as a System.String. The resource to download
            is specified as a System.String containing the URI.
            </summary>
            <param name="address">A System.String containing the URI to download.</param>
            <returns>A System.String containing the requested resource.</returns>
        </member>
        <member name="M:System.Net.WebClient.DownloadString(System.Uri)">
            <summary>
            Downloads the requested resource as a System.String. The resource to download
            is specified as a System.Uri.
            </summary>
            <param name="address">A System.Uri object containing the URI to download.</param>
            <returns>A System.String containing the requested resource.</returns>
        </member>
        <member name="M:System.Net.WebClient.DownloadStringAsync(System.Uri)">
            <summary>
            Downloads the resource specified as a System.Uri. This method does not block
            the calling thread.
            </summary>
            <param name="address">A System.Uri containing the URI to download.</param>
        </member>
        <member name="M:System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)">
            <summary>
            Downloads the specified string to the specified resource. This method does
            not block the calling thread.
            </summary>
            <param name="address">A System.Uri containing the URI to download.</param>
            <param name="userToken">
            A user-defined object that is passed to the method invoked when the asynchronous
            operation completes.
            </param>
        </member>
        <member name="M:System.Net.WebClient.DownloadStringTaskAsync(System.String)">
            <summary>
            Downloads the resource as a String from the URI specified as an asynchronous operation using a task object.
            </summary>
            <param name="address">A System.Uri containing the URI to download.</param>
            <returns>Returns the resource as <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:System.Net.WebClient.DownloadStringTaskAsync(System.Uri)">
            <summary>
            Downloads the resource as a String from the URI specified as an asynchronous operation using a task object.
            </summary>
            <param name="address">A System.Uri containing the URI to download.</param>
            <returns>Returns the resource as <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:System.Net.WebClient.UploadString(System.String,System.String)">
            <summary>
            Uploads the specified string to the specified resource, using the POST method.
            </summary>
            <param name="address">
            The URI of the resource to receive the string. For Http resources, this URI
            must identify a resource that can accept a request sent with the POST method,
            such as a script or ASP page.
            </param>
            <param name="data">The string to be uploaded.</param>
            <returns>A System.String containing the response sent by the server.</returns>
        </member>
        <member name="M:System.Net.WebClient.UploadString(System.Uri,System.String)">
            <summary>
            Uploads the specified string to the specified resource, using the POST method.
            </summary>
            <param name="address">
            The URI of the resource to receive the string. For Http resources, this URI
            must identify a resource that can accept a request sent with the POST method,
            such as a script or ASP page.
            </param>
            <param name="data">The string to be uploaded.</param>
            <returns>A System.String containing the response sent by the server.</returns>
        </member>
        <member name="M:System.Net.WebClient.UploadString(System.String,System.String,System.String)">
            <summary>
            Uploads the specified string to the specified resource, using the specified
            method.
            </summary>
            <param name="address">
            The URI of the resource to receive the file. This URI must identify a resource
            that can accept a request sent with the method method.
            </param>
            <param name="method">
            The HTTP method used to send the string to the resource. If null, the default
            is POST for http and STOR for ftp.
            </param>
            <param name="data">The string to be uploaded.</param>
            <returns>A System.String containing the response sent by the server.</returns>
        </member>
        <member name="M:System.Net.WebClient.UploadString(System.Uri,System.String,System.String)">
            <summary>
            Uploads the specified string to the specified resource, using the specified
            method.
            </summary>
            <param name="address">
            The URI of the resource to receive the file. This URI must identify a resource
            that can accept a request sent with the method method.
            </param>
            <param name="method">
            The HTTP method used to send the string to the resource. If null, the default
            is POST for http and STOR for ftp.
            </param>
            <param name="data">The string to be uploaded.</param>
            <returns>A System.String containing the response sent by the server.</returns>
        </member>
        <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String)">
            <summary>
            Uploads the specified string to the specified resource. This method does
            not block the calling thread.
            </summary>
            <param name="address">
            The URI of the resource to receive the file. For HTTP resources, this URI
            must identify a resource that can accept a request sent with the POST method,
            such as a script or ASP page.
            </param>
            <param name="data">The string to be uploaded.</param>
        </member>
        <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)">
            <summary>
            Uploads the specified string to the specified resource. This method does
            not block the calling thread.
            </summary>
            <param name="address">
            The URI of the resource to receive the file. For HTTP resources, this URI
            must identify a resource that can accept a request sent with the POST method,
            such as a script or ASP page.
            </param>
            <param name="method">
            The HTTP method used to send the file to the resource. If null, the default
            is POST for http and STOR for ftp.
            </param>
            <param name="data">The string to be uploaded.</param>
        </member>
        <member name="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)">
            <summary>
            Uploads the specified string to the specified resource as an asynchronous operation using a task object.
            </summary>
            <param name="address">
            The URI of the resource to receive the string. For HTTP resources, this URI
            must identify a resource that can accept a request sent with the POST method,
            such as a script or ASP page.
            </param>
            <param name="data">The string to be uploaded.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task`1"/>.
            The task object representing the asynchronous operation. The Result property
            on the task object returns a String containing the response sent by the server.
            </returns>
        </member>
        <member name="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)">
            <summary>
            Uploads the specified string to the specified resource as an asynchronous operation using a task object.
            </summary>
            <param name="address">
            The URI of the resource to receive the string. For HTTP resources, this URI
            must identify a resource that can accept a request sent with the POST method,
            such as a script or ASP page.
            </param>
            <param name="data">The string to be uploaded.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task`1"/>.
            The task object representing the asynchronous operation. The Result property
            on the task object returns a String containing the response sent by the server.
            </returns>
        </member>
        <member name="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)">
            <summary>
            Uploads the specified string to the specified resource as an asynchronous operation using a task object.
            </summary>
            <param name="address">
            The URI of the resource to receive the string. For HTTP resources, this URI
            must identify a resource that can accept a request sent with the POST method,
            such as a script or ASP page.
            </param>
            <param name="method">
            The HTTP method used to send the file to the resource. If null, the default
            is POST for http and STOR for ftp.
            </param>
            <param name="data">The string to be uploaded.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task`1"/>.
            The task object representing the asynchronous operation. The Result property
            on the task object returns a String containing the response sent by the server.
            </returns>
        </member>
        <member name="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)">
            <summary>
            Uploads the specified string to the specified resource as an asynchronous operation using a task object.
            </summary>
            <param name="address">
            The URI of the resource to receive the string. For HTTP resources, this URI
            must identify a resource that can accept a request sent with the POST method,
            such as a script or ASP page.
            </param>
            <param name="method">
            The HTTP method used to send the file to the resource. If null, the default
            is POST for http and STOR for ftp.
            </param>
            <param name="data">The string to be uploaded.</param>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task`1"/>.
            The task object representing the asynchronous operation. The Result property
            on the task object returns a String containing the response sent by the server.
            </returns>
        </member>
        <member name="P:System.Net.WebClient.Encoding">
            <summary>
            Gets or sets the System.Text.Encoding used to upload and download strings.
            </summary>
        </member>
        <member name="P:System.Net.WebClient.Headers">
            <summary>
            Gets or sets a collection of header name/value pairs associated with the
            request.
            </summary>
        </member>
        <member name="E:System.Net.WebClient.DownloadStringCompleted">
            <summary>
            Occurs when an asynchronous resource-download operation completes.
            </summary>
        </member>
        <member name="E:System.Net.WebClient.UploadStringCompleted">
            <summary>
            Occurs when an asynchronous string-upload operation completes.
            </summary>
        </member>
        <member name="T:System.Net.WebHeaderCollection">
            <summary>
            Contains protocol headers associated with a request or response.
            </summary>
        </member>
        <member name="M:System.Net.WebHeaderCollection.#ctor">
            <summary>
            Initializes a new instance of the System.Net.WebHeaderCollection class.
            </summary>
        </member>
        <member name="M:System.Net.WebHeaderCollection.Clear">
            <summary>
            Removes all headers from the collection.
            </summary>
        </member>
        <member name="M:System.Net.WebHeaderCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the System.Net.WebHeaderCollection instance
            </summary>
            <returns>An enumerator that can iterate through the System.Net.WebHeaderCollection instance</returns>
        </member>
        <member name="M:System.Net.WebHeaderCollection.Add(System.String)">
            <summary>
            Inserts the specified header into the collection.
            </summary>
            <param name="header">The header to add, with the name and value separated by a colon.</param>
        </member>
        <member name="M:System.Net.WebHeaderCollection.Add(System.Net.HttpRequestHeader,System.String)">
            <summary>
            Inserts the specified header with the specified value into the collection.
            </summary>
            <param name="header">The header to add to the collection.</param>
            <param name="value">The content of the header.</param>
        </member>
        <member name="M:System.Net.WebHeaderCollection.Add(System.Net.HttpResponseHeader,System.String)">
            <summary>
            Inserts the specified header with the specified value into the collection.
            </summary>
            <param name="header">The header to add to the collection.</param>
            <param name="value">The content of the header.</param>
        </member>
        <member name="M:System.Net.WebHeaderCollection.Add(System.String,System.String)">
            <summary>
            Inserts a header with the specified name and value into the collection.
            </summary>
            <param name="name">The header to add to the collection.</param>
            <param name="value">The content of the header.</param>
        </member>
        <member name="M:System.Net.WebHeaderCollection.Get(System.String)">
            <summary>
            Get the value of a particular header in the collection, specified by the
            name of the header.
            </summary>
            <param name="name">The name of the Web header.</param>
            <returns>A System.String holding the value of the specified header.</returns>
        </member>
        <member name="M:System.Net.WebHeaderCollection.Remove(System.Net.HttpRequestHeader)">
            <summary>
            Removes the specified header from the collection.
            </summary>
            <param name="header">The System.Net.HttpRequestHeader instance to remove from the collection.</param>
        </member>
        <member name="M:System.Net.WebHeaderCollection.Remove(System.Net.HttpResponseHeader)">
            <summary>
            Removes the specified header from the collection.
            </summary>
            <param name="header">The System.Net.HttpResponseHeader instance to remove from the collection.</param>
        </member>
        <member name="M:System.Net.WebHeaderCollection.Remove(System.String)">
            <summary>
            Removes the specified header from the collection.
            </summary>
            <param name="name">The name of the header to remove from the collection.</param>
        </member>
        <member name="M:System.Net.WebHeaderCollection.Set(System.String,System.String)">
            <summary>
            Sets the specified header to the specified value.
            </summary>
            <param name="name">The header to set.</param>
            <param name="value">The content of the header to set.</param>
        </member>
        <member name="P:System.Net.WebHeaderCollection.AllKeys">
            <summary>
            Gets all header names (keys) in the collection.
            </summary>
        </member>
        <member name="P:System.Net.WebHeaderCollection.Count">
            <summary>
            Gets the number of headers in the collection.
            </summary>
        </member>
        <member name="P:System.Net.WebHeaderCollection.Item(System.Net.HttpRequestHeader)">
            <summary>
            Gets or sets the specified request header.
            </summary>
            <param name="header">The request header value.</param>
            <returns>A System.String instance containing the specified header value.</returns>
        </member>
        <member name="P:System.Net.WebHeaderCollection.Item(System.Net.HttpResponseHeader)">
            <summary>
            Gets or sets the specified response header.
            </summary>
            <param name="header">The response header value.</param>
            <returns>A System.String instance containing the specified header.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Match.NextMatch">
            <summary>
            Returns a new System.Text.RegularExpressions.Match object with the results
            for the next match, starting at the position at which the last match ended
            (at the character after the last matched character).
            </summary>
            <returns>The next regular expression match.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
            <summary>
            Returns the expansion of the specified replacement pattern.
            </summary>
            <param name="replacement">The replacement pattern to use.</param>
            <returns>The expanded version of the replacement parameter.</returns>
        </member>
        <member name="P:System.Text.RegularExpressions.Match.Empty">
            <summary>
            Gets the empty group. All failed matches return this empty match.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Match.Groups">
            <summary>
            Gets a collection of groups matched by the regular expression.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.MatchEvaluator">
            <summary>
            Represents the method that is called each time a regular expression match
            is found during a Overload:System.Text.RegularExpressions.Regex.Replace method
            operation.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Regex">
            <summary>
            Represents an immutable regular expression.
            </summary>
            <example>
            Here is an example of a use of Regex that checks if an email address is valid:
            <code lang="C#">
            if (Regex.IsMatch(TextBoxEmailAddress.Text, @"^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$"))
                MessageBox.Show(TextBoxEmailAddress.Text + " is a valid email address.");
            else
                MessageBox.Show(TextBoxEmailAddress.Text + " is NOT a valid email address.");
            </code>
            </example>
        </member>
        <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
            <summary>
            Specifies that a pattern-matching operation should not time out.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.#ctor">
            <summary>
            Initializes a new instance of the System.Text.RegularExpressions.Regex class.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.Text.RegularExpressions.Regex class
            for the specified regular expression.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
            <exception cref="T:System.ArgumentNullException">pattern is null.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new instance of the System.Text.RegularExpressions.Regex class
            for the specified regular expression, with options that modify the pattern.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that modify the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
            <summary>
            Escapes a minimal set of characters (\, *, +, ?, |, {, [, (,), ^, $,., #,
            and white space) by replacing them with their escape codes. This instructs
            the regular expression engine to interpret these characters literally rather
            than as metacharacters.
            </summary>
            <param name="str">The input string that contains the text to convert.</param>
            <returns>A string of characters with metacharacters converted to their escaped form.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
            <summary>
            Indicates whether the regular expression specified in the System.Text.RegularExpressions.Regex
            constructor finds a match in a specified input string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
            <summary>
            Indicates whether the regular expression specified in the System.Text.RegularExpressions.Regex
            constructor finds a match in the specified input string, beginning at the
            specified starting position in the string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="startat">The character position at which to start the search.</param>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified
            input string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified
            input string, using the specified matching options.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that provide options for
            matching.
            </param>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
            <summary>
            Searches the specified input string for the first occurrence of the regular
            expression specified in the System.Text.RegularExpressions.Regex constructor.
            </summary>
            <param name="input">The string to search for a match.</param>
            <returns>An object that contains information about the match.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
            <summary>
            Searches the input string for the first occurrence of a regular expression,
            beginning at the specified starting position in the string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="startat">The zero-based character position at which to start the search.</param>
            <returns>An object that contains information about the match.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
            <summary>
            Searches the specified input string for the first occurrence of the specified
            regular expression.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <returns>An object that contains information about the match.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
            <summary>
            Searches the input string for the first occurrence of a regular expression,
            beginning at the specified starting position and searching only the specified
            number of characters.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="beginning">
            The zero-based character position in the input string that defines the leftmost
            position to be searched.
            </param>
            <param name="length">The number of characters in the substring to include in the search.</param>
            <returns>An object that contains information about the match.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the input string for the first occurrence of the specified regular
            expression, using the specified matching options.</summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that provide options for
            matching.
            </param>
            <returns>An object that contains information about the match.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
            <summary>
            Searches the specified input string for all occurrences of a regular expression.
            </summary>
            <param name="input">The string to search for a match.</param>
            <returns>
            A collection of the System.Text.RegularExpressions.Match objects found by
            the search. If no matches are found, the method returns an empty collection
            object.
            </returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
            <summary>
            Searches the specified input string for all occurrences of a regular expression,
            beginning at the specified starting position in the string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="startat">The character position in the input string at which to start the search.</param>
            <returns>
            A collection of the System.Text.RegularExpressions.Match objects found by
            the search. If no matches are found, the method returns an empty collection
            object.
            </returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
            <summary>
            Searches the specified input string for all occurrences of a specified regular
            expression.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <returns>
            A collection of the System.Text.RegularExpressions.Match objects found by
            the search. If no matches are found, the method returns an empty collection
            object.
            </returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for all occurrences of a specified regular
            expression, using the specified matching options.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that specify options for
            matching.
            </param>
            <returns>
            A collection of the System.Text.RegularExpressions.Match objects found by
            the search. If no matches are found, the method returns an empty collection
            object.
            </returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
            <summary>
            In a specified input string, replaces all strings that match a regular expression
            pattern with a specified replacement string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="replacement">The replacement string.</param>
            <returns>
            A new string that is identical to the input string, except that the replacement
            string takes the place of each matched string.
            </returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
            <summary>
            In a specified input string, replaces all strings that match a specified
            regular expression with a specified replacement string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="replacement">The replacement string.</param>
            <returns>
            A new string that is identical to the input string, except that the replacement
            string takes the place of each matched string.
            </returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            In a specified input string, replaces all strings that match a specified
            regular expression with a specified replacement string. Specified options
            modify the matching operation.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="replacement">The replacement string.</param>
            <param name="options">
            A bitwise combination of the enumeration values that provide options for
            matching.
            </param>
            <returns>
            A new string that is identical to the input string, except that the replacement
            string takes the place of each matched string.
            </returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.ToString">
            <summary>
            Returns the regular expression pattern that was passed into the Regex constructor.
            </summary>
            <returns>The pattern parameter that was passed into the Regex constructor.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
            <summary>
            Converts any escaped characters in the input string.
            </summary>
            <param name="str">The input string containing the text to convert.</param>
            <returns>
            A string of characters with any escaped characters converted to their unescaped
            form.
            </returns>
        </member>
        <member name="P:System.Text.RegularExpressions.Regex.Options">
            <summary>
            Gets the options that were passed into the System.Text.RegularExpressions.Regex
            constructor.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
            <summary>
            Gets a value that indicates whether the regular expression searches from
            right to left.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.RegexOptions">
            <summary>
            Provides enumerated values to use to set regular expression options.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.None">
            <summary>
            Specifies that no options are set.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
            <summary>
            Specifies case-insensitive matching.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
            <summary>
            Multiline mode. Changes the meaning of ^ and $ so they match at the beginning
            and end, respectively, of any line, and not just the beginning and end of
            the entire string.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture" -->
        <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
            <summary>
            Specifies single-line mode. Changes the meaning of the dot (.) so it matches
            every character (instead of every character except \n).
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
            <summary>
            Eliminates unescaped white space from the pattern and enables comments marked
            with #. However, the System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace
            value does not affect or eliminate white space in character classes.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
            <summary>
            Specifies that the search will be from right to left instead of from left
            to right.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
            <summary>
            Enables ECMAScript-compliant behavior for the expression. This value can
            be used only in conjunction with the System.Text.RegularExpressions.RegexOptions.IgnoreCase,
            System.Text.RegularExpressions.RegexOptions.Multiline, and System.Text.RegularExpressions.RegexOptions.Compiled
            values. The use of this value with any other values results in an exception.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
            <summary>
            Specifies that cultural differences in language is ignored. See Regular Expression
            Options for more information.
            </summary>
        </member>
        <member name="T:System.ComponentModel.PropertyChangedEventArgs">
            <summary>
            Provides data for the System.ComponentModel.INotifyPropertyChanged.PropertyChanged event.
            </summary>
        </member>
        <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.ComponentModel.PropertyChangedEventArgs class.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
            <summary>
            Gets the name of the property that changed. Returns the name of the property that changed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Debug">
            <summary>
            Provides a set of methods and properties that help debug your code. This
            class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Debug.Assert(System.Boolean)">
            <summary>
            Checks for a condition; if the condition is false, displays a message box
            that shows the call stack.
            </summary>
            <param name="condition">
            The conditional expression to evaluate. If the condition is true, a failure
            message is not sent and the message box is not displayed.
            </param>
        </member>
        <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)">
            <summary>
            Checks for a condition; if the condition is false, outputs a specified message
            and displays a message box that shows the call stack.
            </summary>
            <param name="condition">
            The conditional expression to evaluate. If the condition is true, the specified
            message is not sent and the message box is not displayed.
            </param>
            <param name="message">The message to send to the System.Diagnostics.Trace.Listeners collection.</param>
        </member>
        <member name="M:System.Diagnostics.Debug.WriteLine(System.Object)">
            <summary>
            Writes the value of the object's System.Object.ToString() method to the trace
            listeners in the System.Diagnostics.Debug.Listeners collection.
            </summary>
            <param name="value">An object whose name is sent to the System.Diagnostics.Debug.Listeners.</param>
        </member>
        <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
            <summary>
            Writes a message followed by a line terminator to the trace listeners in
            the System.Diagnostics.Debug.Listeners collection.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])">
            <summary>
            Writes a formatted message followed by a line terminator to the trace listeners
            in the System.Diagnostics.Debug.Listeners collection.
            </summary>
            <param name="format">
            A composite format string (see Remarks) that contains text intermixed with
            zero or more format items, which correspond to objects in the args array.
            </param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)">
            <summary>
            Writes a message to the trace listeners in the System.Diagnostics.Debug.Listeners
            collection if a condition is true.
            </summary>
            <param name="condition">
            The conditional expression to evaluate. If the condition is true, the message
            is written to the trace listeners in the collection.
            </param>
            <param name="message">A message to write.</param>
        </member>
        <member name="T:System.Collections.Generic.Queue`1">
            <summary>
            Represents a first-in, first-out collection of objects.
            </summary>
            <typeparam name="T">Specifies the type of elements in the queue.</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Queue`1.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Queue`1.Clear" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Queue`1.Contains(`0)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Queue`1.Dequeue" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Queue`1.Enqueue(`0)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Queue`1.GetEnumerator" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Queue`1.Peek" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Queue`1.ToArray" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Queue`1.CopyTo(System.Array,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "P:System.Collections.Generic.Queue`1.Count" -->
        <member name="P:System.Collections.Generic.Queue`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the System.Collections.ICollection
            is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Queue`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the System.Collections.ICollection.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Collections.Generic.Queue`1.Enumerator" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Queue`1.Enumerator.Dispose" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Queue`1.Enumerator.MoveNext" -->
        <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.Stack`1">
            <summary>
            Represents a variable size last-in-first-out (LIFO) collection of instances
            of the same arbitrary type.
            </summary>
            <typeparam name="T">Specifies the type of elements in the stack.</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.#ctor" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.Clear" -->
        <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
            <param name="p0">
            The object to locate in the <see cref="T:System.Collections.Generic.Stack`1"/>. The value
            can be null for reference types.
            </param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.Stack`1"/>; otherwise,
            false.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.GetEnumerator" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.TrimExcess" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.Peek" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.Pop" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.Push(`0)" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.ToArray" -->
        <!-- Badly formed XML comment ignored for member "P:System.Collections.Generic.Stack`1.Count" -->
        <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the System.Collections.ICollection
            is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the System.Collections.ICollection.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Collections.Generic.Stack`1.Enumerator" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.Enumerator.Dispose" -->
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.Stack`1.Enumerator.MoveNext" -->
        <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
            <summary>
            Represents a dynamic data collection that provides notifications when items
            get added, removed, or when the whole list is refreshed.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
            <summary>
            Notifies listeners of dynamic changes, such as when items get added and removed or the whole list is refreshed.
            </summary>
        </member>
        <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="T:System.ComponentModel.INotifyPropertyChanged">
            <summary>
            Notifies clients that a property value has changed.
            </summary>
        </member>
        <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RaisePropertyChanged(System.String)">
            <summary>
            Raises the event to call when a property is changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of ObservableCollection.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of ObservableCollection and copy the collection given as a parameter in it.
            </summary>
            <param name="collection">The collection to copy in the new instance of ObservableCollection.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of ObservableCollection and copy the list given as a parameter in it.
            </summary>
            <param name="list">The list to copy in the new instance of ObservableCollection.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.CopyFrom(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Fills the ObservableCollection with the data contained in the collection given as a parameter.
            </summary>
            <param name="collection">The collection to copy from.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the event to call when the collection has changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
            <summary>
            Removes all the elements from the ObservableCollection.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the given index from the ObservableCollection.
            </summary>
            <param name="index">The index of the element</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element at the given index into the ObservableCollection.
            </summary>
            <param name="index">The index at which the element will be added.</param>
            <param name="item">The element to add.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the given position with the element given as a parameter.
            </summary>
            <param name="index">The index of the element that must be replaced.</param>
            <param name="item">The element with which to replace the former element.</param>
        </member>
        <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
            <summary>
            Occurs when an item is added, removed, changed, moved, or the entire list
            is refreshed.
            </summary>
        </member>
        <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
            <summary>
            Describes the action that caused a System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged event.
            </summary>
        </member>
        <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
            <summary>
            One or more items were added to the collection.
            </summary>
        </member>
        <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
            <summary>
            One or more items were removed from the collection.
            </summary>
        </member>
        <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
            <summary>
                One or more items were replaced in the collection.
            </summary>
        </member>
        <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
            <summary>
                One or more items were moved within the collection.
            </summary>
        </member>
        <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
            <summary>
                The content of the collection changed dramatically.
            </summary>
        </member>
        <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
            <summary>
            Provides data for the System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
            event.
            </summary>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Initializes a new instance of the System.Collections.Specialized.NotifyCollectionChangedEventArgs class
            that describes a System.Collections.Specialized.NotifyCollectionChangedAction.Reset change.
            </summary>
            <param name="action">The action that caused the event. This must be set to System.Collections.Specialized.NotifyCollectionChangedAction.Reset.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
            <summary>
            Initializes a new instance of the System.Collections.Specialized.NotifyCollectionChangedEventArgs class that describes a multi-item change.
            </summary>
            <param name="action">The action that caused the event. This can be set to System.Collections.Specialized.NotifyCollectionChangedAction.Reset,
            System.Collections.Specialized.NotifyCollectionChangedAction.Add, or System.Collections.Specialized.NotifyCollectionChangedAction.Remove.
            </param>
            <param name="changedItems">The items that are affected by the change.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
            <summary>
            Initializes a new instance of the System.Collections.Specialized.NotifyCollectionChangedEventArgs class that describes a one-item change.
            Throws an exception if action is not Reset, Add, or Remove, or if action is Reset and changedItem is not null.
            </summary>
            <param name="action">The action that caused the event. This can be set to System.Collections.Specialized.NotifyCollectionChangedAction.Reset, System.Collections.Specialized.NotifyCollectionChangedAction.Add, or System.Collections.Specialized.NotifyCollectionChangedAction.Remove.</param>
            <param name="changedItem">The item that is affected by the change.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the System.Collections.Specialized.NotifyCollectionChangedEventArgs class
            that describes a multi-item System.Collections.Specialized.NotifyCollectionChangedAction.Replace change.
            Exceptions:
              System.ArgumentException:
                If action is not Replace.
            
              System.ArgumentNullException:
                If oldItems or newItems is null.
            </summary>
            <param name="action">The action that caused the event. This can only be set to System.Collections.Specialized.NotifyCollectionChangedAction.Replace.</param>
            <param name="newItems">The new items that are replacing the original items.</param>
            <param name="oldItems">The original items that are replaced.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
            <summary>
            Initializes a new instance of the System.Collections.Specialized.NotifyCollectionChangedEventArgs class
            that describes a multi-item change or a System.Collections.Specialized.NotifyCollectionChangedAction.Reset change.
            Exceptions:
              System.ArgumentException:
                If action is not Reset, Add, or Remove, if action is Reset and either changedItems
                is not null or startingIndex is not -1, or if action is Add or Remove and
                startingIndex is less than -1.
            
              System.ArgumentNullException:
                If action is Add or Remove and changedItems is null.
            </summary>
            <param name="action">
            The action that caused the event. This can be set to System.Collections.Specialized.NotifyCollectionChangedAction.Reset,
            System.Collections.Specialized.NotifyCollectionChangedAction.Add, or System.Collections.Specialized.NotifyCollectionChangedAction.Remove.
            </param>
            <param name="changedItems">The items affected by the change.</param>
            <param name="startingIndex">The index where the change occurred.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the System.Collections.Specialized.NotifyCollectionChangedEventArgs class that describes a one-item change.
            Exceptions:
              System.ArgumentException:
                If action is not Reset, Add, or Remove, or if action is Reset and either
                changedItems is not null or index is not -1.
            </summary>
            <param name="action">
            The action that caused the event. This can be set to System.Collections.Specialized.NotifyCollectionChangedAction.Reset,
            System.Collections.Specialized.NotifyCollectionChangedAction.Add, or System.Collections.Specialized.NotifyCollectionChangedAction.Remove.
            </param>
            <param name="changedItem">The item that is affected by the change.</param>
            <param name="index">The index where the change occurred.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the System.Collections.Specialized.NotifyCollectionChangedEventArgs class
            that describes a one-item System.Collections.Specialized.NotifyCollectionChangedAction.Replace change.
            System.ArgumentException:
              If action is not Replace.
            </summary>
            <param name="action">The action that caused the event. This can only be set to System.Collections.Specialized.NotifyCollectionChangedAction.Replace.</param>
            <param name="newItem">The new item that is replacing the original item.</param>
            <param name="oldItem">The original item that is replaced.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
            <summary>
            Initializes a new instance of the System.Collections.Specialized.NotifyCollectionChangedEventArgs class
            that describes a multi-item System.Collections.Specialized.NotifyCollectionChangedAction.Replace change.
            Exceptions:
              System.ArgumentException:
                If action is not Replace.
            
              System.ArgumentNullException:
                If oldItems or newItems is null.
            </summary>
            <param name="action">The action that caused the event. This can only be set to System.Collections.Specialized.NotifyCollectionChangedAction.Replace.</param>
            <param name="newItems">The new items that are replacing the original items.</param>
            <param name="oldItems">The original items that are replaced.</param>
            <param name="startingIndex">The index of the first item of the items that are being replaced.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the System.Collections.Specialized.NotifyCollectionChangedEventArgs
            class that describes a multi-item System.Collections.Specialized.NotifyCollectionChangedAction.Move
            change.
            Exceptions:
              System.ArgumentException:
                If action is not Move or index is less than 0.
            </summary>
            <param name="action">The action that caused the event. This can only be set to System.Collections.Specialized.NotifyCollectionChangedAction.Move.</param>
            <param name="changedItems">The items affected by the change.</param>
            <param name="index">The new index for the changed items.</param>
            <param name="oldIndex">The old index for the changed items.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the System.Collections.Specialized.NotifyCollectionChangedEventArgs
            class that describes a one-item System.Collections.Specialized.NotifyCollectionChangedAction.Move
            change.
            Exceptions:
              System.ArgumentException:
                If action is not Move or index is less than 0.
            </summary>
            <param name="action">The action that caused the event. This can only be set to System.Collections.Specialized.NotifyCollectionChangedAction.Move.</param>
            <param name="changedItem">The item affected by the change.</param>
            <param name="index">The new index for the changed item.</param>
            <param name="oldIndex">The old index for the changed item.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the System.Collections.Specialized.NotifyCollectionChangedEventArgs
            class that describes a one-item System.Collections.Specialized.NotifyCollectionChangedAction.Replace
            change.
            Exceptions:
              System.ArgumentException:
                If action is not Replace.
            </summary>
            <param name="action">The action that caused the event. This can be set to System.Collections.Specialized.NotifyCollectionChangedAction.Replace.</param>
            <param name="newItem">The new item that is replacing the original item.</param>
            <param name="oldItem">The original item that is replaced.</param>
            <param name="index">The index of the item being replaced.</param>
        </member>
        <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
            <summary>
            Gets the action that caused the event. Returns a System.Collections.Specialized.NotifyCollectionChangedAction value that describes the action that caused the event.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
            <summary>
            Gets the list of new items involved in the change. Returns the list of new items involved in the change.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
            <summary>
            Gets the index at which the change occurred.
            Returns the zero-based index at which the change occurred.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
            <summary>
            Gets the list of items affected by a System.Collections.Specialized.NotifyCollectionChangedAction.Replace, Remove, or Move action.
            Returns he list of items affected by a System.Collections.Specialized.NotifyCollectionChangedAction.Replace, Remove, or Move action.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
            <summary>
            Gets the index at which a System.Collections.Specialized.NotifyCollectionChangedAction.Move, Remove, or Replace action occurred.
            Returns the zero-based index at which a System.Collections.Specialized.NotifyCollectionChangedAction.Move, Remove, or Replace action occurred.
            </summary>
        </member>
        <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
            <summary>
            Represents the method that handles the System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:System.ComponentModel.PropertyChangedEventHandler">
            <summary>
            Represents the method that will handle the System.ComponentModel.INotifyPropertyChanged.PropertyChanged
            event raised when a property is changed on a component.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:System.Uri">
            <summary>
            Provides an object representation of a uniform resource identifier (URI)
            and easy access to the parts of the URI.
            </summary>
        </member>
        <member name="M:System.Uri.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.Uri class with the specified URI.
            </summary>
            <param name="uriString">An Uri</param>
        </member>
        <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
            <summary>
            Initializes a new instance of the System.Uri class with the specified URI.
            This constructor allows you to specify if the URI string is a relative URI,
            absolute URI, or is indeterminate.
            </summary>
            <param name="uriString">
            A string that identifies the resource to be represented by the System.Uri
            instance.
            </param>
            <param name="uriKind">Specifies whether the URI string is a relative URI, absolute URI, or is indeterminate.</param>
        </member>
        <member name="M:System.Uri.ToString">
            <summary>
            Gets the original uri string.
            </summary>
            <returns>
            The string that was used to define this instance of the System.Uri class.
            </returns>
        </member>
        <member name="M:System.Uri.GetHashCode">
            <summary>
            Gets the hash code for the URI.
            </summary>
            <returns>
            An System.Int32 containing the hash value generated for this URI.
            </returns>
        </member>
        <member name="M:System.Uri.Equals(System.Object)">
            <summary>
            Compares two System.Uri instances for equality.
            </summary>
            <param name="comparand">The System.Uri instance or a URI identifier to compare with the current instance.</param>
            <returns>
            A System.Boolean value that is true if the two instances represent the same
            URI; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
            <summary>
            Determines whether two System.Uri instances do not have the same value.
            </summary>
            <param name="uri1">A System.Uri instance to compare with uri2.</param>
            <param name="uri2">A System.Uri instance to compare with uri1.</param>
            <returns>
            A System.Boolean value that is true if the two System.Uri instances are not
            equal; otherwise, false. If either parameter is null, this method returns
            true.
            </returns>
        </member>
        <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
            <summary>
            Determines whether two System.Uri instances have the same value.
            </summary>
            <param name="uri1">A System.Uri instance to compare with uri2.</param>
            <param name="uri2">A System.Uri instance to compare with uri1.</param>
            <returns>
            A System.Boolean value that is true if the System.Uri instances are equivalent;
            otherwise, false.
            </returns>
        </member>
        <member name="P:System.Uri.OriginalString">
            <summary>
            Gets the original URI string that was passed to the System.Uri constructor.
            </summary>
        </member>
        <member name="T:System.UriKind">
            <summary>
            Defines the kinds of System.Uris for the System.Uri.IsWellFormedUriString(System.String,System.UriKind)
            and several Overload:System.Uri.#ctor methods.
            </summary>
        </member>
        <member name="F:System.UriKind.RelativeOrAbsolute">
            <summary>
            The kind of the Uri is indeterminate.
            </summary>
        </member>
        <member name="F:System.UriKind.Absolute">
            <summary>
            The Uri is an absolute Uri.
            </summary>
        </member>
        <member name="F:System.UriKind.Relative">
            <summary>
            The Uri is a relative Uri.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Stopwatch">
            <summary>
            Provides a set of methods and properties that you can use to accurately measure
            elapsed time.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Stopwatch.#ctor">
            <summary>
            Initializes a new instance of the System.Diagnostics.Stopwatch class.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Stopwatch.Reset">
            <summary>
            Stops time interval measurement and resets the elapsed time to zero.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Stopwatch.Restart">
            <summary>
            Stops time interval measurement, resets the elapsed time to zero, and starts
            measuring elapsed time.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Stopwatch.Start">
            <summary>
            Starts, or resumes, measuring elapsed time for an interval.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Diagnostics.Stopwatch.StartNew" -->
        <member name="M:System.Diagnostics.Stopwatch.Stop">
            <summary>
            Stops measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="P:System.Diagnostics.Stopwatch.Elapsed">
            <summary>
            A read-only System.TimeSpan representing the total elapsed time measured
            by the current instance.
            </summary>
        </member>
        <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
            <summary>
            Gets the total elapsed time measured by the current instance, in milliseconds.
            </summary>
        </member>
        <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
            <summary>
            Gets the total elapsed time measured by the current instance, in timer ticks.
            </summary>
        </member>
        <member name="P:System.Diagnostics.Stopwatch.IsRunning">
            <summary>
            Gets a value indicating whether the System.Diagnostics.Stopwatch timer is
            running.
            </summary>
        </member>
    </members>
</doc>
